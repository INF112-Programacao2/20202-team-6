Explicando a expressão regular:

( [+-]? \\d* (?: \\/ (\\d+) )? )

[+-]? : identifica o sinal de + ou - ou nenhum sinal;
\\d*  : identifica o coeficiente que possui nenhum ou mais digitos (Numerador);
(?: \\/ (\\d+) )? : identifica se existe uma divisão com o digito anterior(Numerador) e captura o denominador;
()    : Captura tudo

(?: x (?: \\^ (?: \\(? (\\d+) (?: \\/ (\\d+) \\) )? )? )? )?      

x : identifica a variavel x;
(?: \\^ (?: \\(? (\\d+) (?: \\/ (\\d+) \\) )? )? )? : identifica se há uma notação de expoente(^) seguido
de abre parenteses, com o digito(numerador) lá dentro e, caso haja uma divisão, também capturo o 
denominador, fechando o parenteses no final.
(?:)? : junta os dois anteriores e digo que eles podem ou não ocorrer

Então, eu vou basicamente olhar a entrada e comparar com a Expressão Regular r(). Se a entrada corresponder com r()
dizemos que é uma Match. Quem determina todas as Matches é o sregex_iterator pos e com ele eu posso guardar os valores
que eu quero, porque eles são, justamente o retorno de sregex_iterator pos.

----------------------------------------------------------------------------------------------------------------------------------

Matches:

pos->str(x) é o retorno de sregex_iterator desreferenciado, o que me da uma std::string dos coeficientes e x é o 
indice que identifica um grupo. A cada pos++ temos as Matches que foram encontradas pelo iterador pos ao ser construido.

Exemplo: -2/3x^(3/8)-5x+x^2+9

Grupo 0: Match
Grupo 1: Numerador do coeficiente
Grupo 2: Denominador do coeficiente
Grupo 3: Numerador do expoente
Grupo 4: Denominador do expoente

Match 1: -2/3x^(3/8)   Grupo 1 / Grupo 2: -0.666667;   Grupo 3 / Grupo 4: 0.375
Match 2: -5x           Grupo 1: -5;                    Grupo 3: 1
Match 3: +x^2          Grupo 1: 1;                     Grupo 3: 2
Match 4: +9            Grupo 1: 9;                     Grupo 3: 0